{"ast":null,"code":"var _jsxFileName = \"/home/sebastian/Pobrane/cryptowatch/src/pages/News.tsx\",\n    _s = $RefreshSig$();\n\nimport { ButtonBase, Grid, Skeleton, Stack, TextField } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React, { useEffect, useRef, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Subject, takeUntil } from 'rxjs';\nimport NewsList from '../components/NewsList';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\nimport { retrieveNewsAction } from '../store/newsSlice';\nimport SearchIcon from '@mui/icons-material/Search';\nimport NewsListSkeleton from '../components/NewsListSkeleton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction News() {\n  _s();\n\n  var _newsState$data;\n\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [destroy$] = useState(new Subject());\n  const [search, setSearch] = useState('');\n  const searchRef = useRef(null);\n  const newsState = useAppSelector(state => state.news);\n  const dispatch = useAppDispatch();\n\n  const retrieveNews = (page, search) => {\n    retrieveNewsAction(newsState, dispatch, {\n      page,\n      q: search\n    }).pipe(takeUntil(destroy$)).subscribe(res => {\n      if (page === 1) {\n        // reset loading for initial call\n        setLoading(false);\n      }\n\n      if (res.length < 24) {\n        setHasMore(false);\n      }\n\n      if (res.length > 0) {\n        // we don't need to increment the offset if there is no more data to fetch\n        setPage(page + 1);\n      }\n    });\n  };\n\n  const handleSearch = e => {\n    if (e.target) setSearch(e.target.value);\n  };\n\n  const handleSearchSubmit = e => {\n    var _searchRef$current;\n\n    if (!search) return;\n    e === null || e === void 0 ? void 0 : e.preventDefault();\n    (_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.blur();\n    setLoading(true);\n    window.scroll({\n      top: 0\n    }); // scroll to top to prevent fetching next page\n\n    retrieveNews(1, search);\n  };\n\n  useEffect(() => {\n    window.scroll({\n      top: 0\n    }); // scroll to top to prevent fetching next page\n\n    retrieveNews(page, search);\n    return () => {\n      destroy$.next();\n      destroy$.complete();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        mb: 3,\n        position: \"sticky\",\n        top: 0,\n        paddingTop: \"70px\",\n        paddingBottom: \"10px\",\n        zIndex: 10,\n        bgcolor: '#f4f4f4'\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 0,\n          md: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSearchSubmit,\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              direction: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                inputRef: searchRef,\n                value: search,\n                onBlur: () => handleSearchSubmit(),\n                onChange: handleSearch,\n                fullWidth: true,\n                style: {\n                  background: \"white\"\n                },\n                id: \"outlined-basic\",\n                label: \"Search\",\n                variant: \"outlined\",\n                size: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ButtonBase, {\n                onClick: () => handleSearchSubmit(),\n                children: /*#__PURE__*/_jsxDEV(SearchIcon, {\n                  sx: {\n                    color: 'action.active',\n                    ml: 1,\n                    height: \"40px\",\n                    width: \"40px\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 0,\n          md: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(NewsListSkeleton, {\n        size: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      style: {\n        overflow: \"inherit\"\n      },\n      scrollThreshold: \"20px\",\n      next: () => retrieveNews(page, search),\n      dataLength: (_newsState$data = newsState.data) === null || _newsState$data === void 0 ? void 0 : _newsState$data.length,\n      hasMore: hasMore,\n      loader: /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"60%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 33\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: /*#__PURE__*/_jsxDEV(NewsList, {\n          news: newsState.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(News, \"nLQ7KXHgu2NCVIFuQQFerQZ0q9g=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});\n\n_c = News;\nexport default News;\n\nvar _c;\n\n$RefreshReg$(_c, \"News\");","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/pages/News.tsx"],"names":["ButtonBase","Grid","Skeleton","Stack","TextField","Box","React","useEffect","useRef","useState","InfiniteScroll","Subject","takeUntil","NewsList","useAppDispatch","useAppSelector","retrieveNewsAction","SearchIcon","NewsListSkeleton","News","loading","setLoading","page","setPage","hasMore","setHasMore","destroy$","search","setSearch","searchRef","newsState","state","news","dispatch","retrieveNews","q","pipe","subscribe","res","length","handleSearch","e","target","value","handleSearchSubmit","preventDefault","current","blur","window","scroll","top","next","complete","display","alignItems","mb","position","paddingTop","paddingBottom","zIndex","bgcolor","background","color","ml","height","width","overflow","data"],"mappings":"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","sourcesContent":["import { ButtonBase, Grid, Skeleton, Stack, TextField } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React, { ChangeEvent, FormEvent, useEffect, useRef, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Subject, takeUntil } from 'rxjs';\nimport NewsList from '../components/NewsList';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\nimport { retrieveNewsAction } from '../store/newsSlice';\nimport SearchIcon from '@mui/icons-material/Search';\nimport NewsListSkeleton from '../components/NewsListSkeleton';\n\nfunction News() {\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(1);\n    const [hasMore, setHasMore] = useState(true);\n    const [destroy$] = useState(new Subject<void>());\n    const [search, setSearch] = useState('');\n    const searchRef = useRef<any>(null);\n\n    const newsState = useAppSelector(state => state.news);\n    const dispatch = useAppDispatch();\n\n    const retrieveNews = (page: number, search: string) => {\n        retrieveNewsAction(newsState, dispatch, { page, q: search }).pipe(\n            takeUntil(destroy$)\n        ).subscribe(res => {\n            if (page === 1) { // reset loading for initial call\n                setLoading(false);\n            }\n            if (res.length < 24) {\n                setHasMore(false);\n            }\n            if (res.length > 0) { // we don't need to increment the offset if there is no more data to fetch\n                setPage(page + 1);\n            }\n        });\n    }\n\n    const handleSearch = (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        if (e.target)\n            setSearch(e.target.value)\n    }\n\n    const handleSearchSubmit = (e?: FormEvent<HTMLFormElement>) => {\n        if (!search) return;\n        e?.preventDefault();\n        searchRef.current?.blur();\n        setLoading(true);\n        window.scroll({ top: 0 }); // scroll to top to prevent fetching next page\n        retrieveNews(1, search);\n    }\n\n    useEffect(() => {\n        window.scroll({ top: 0 }); // scroll to top to prevent fetching next page\n        retrieveNews(page, search);\n\n        return () => {\n            destroy$.next();\n            destroy$.complete();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <React.Fragment>\n            <Box sx={{ display: 'flex', alignItems: 'flex-end', mb: 3, position: \"sticky\", top: 0, paddingTop: \"70px\", paddingBottom: \"10px\", zIndex: 10, bgcolor: '#f4f4f4' }}>\n                <Grid container>\n                    <Grid item xs={0} md={3}></Grid>\n                    <Grid item xs={12} md={6} justifyContent={\"center\"}>\n                        <form onSubmit={handleSearchSubmit}>\n                            <Stack direction={\"row\"}>\n                                <TextField inputRef={searchRef} value={search} onBlur={() => handleSearchSubmit()} onChange={handleSearch} fullWidth style={{ background: \"white\" }} id=\"outlined-basic\" label=\"Search\" variant=\"outlined\" size='small' />\n                                <ButtonBase onClick={() => handleSearchSubmit()}>\n                                    <SearchIcon sx={{ color: 'action.active', ml: 1, height: \"40px\", width: \"40px\" }} />\n                                </ButtonBase>\n                            </Stack>\n                        </form>\n                    </Grid>\n                    <Grid item xs={0} md={3}></Grid>\n                </Grid>\n            </Box>\n            {\n                loading ? (\n                    <Grid container spacing={2}>\n                        <NewsListSkeleton size={24} />\n                    </Grid>\n                ) : (\n\n                    <InfiniteScroll style={{ overflow: \"inherit\" }}\n                        scrollThreshold={\"20px\"}\n                        next={() => retrieveNews(page, search)}\n                        dataLength={newsState.data?.length}\n                        hasMore={hasMore}\n                        loader={<Skeleton width={\"60%\"} />}>\n                        <Grid container spacing={2}>\n                            <NewsList news={newsState.data} />\n                        </Grid>\n                    </InfiniteScroll>\n                )\n            }\n        </React.Fragment>\n    );\n}\n\nexport default News;\n"]},"metadata":{},"sourceType":"module"}