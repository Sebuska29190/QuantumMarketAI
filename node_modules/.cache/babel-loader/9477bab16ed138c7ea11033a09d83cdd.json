{"ast":null,"code":"import { of, mergeMap, throwError } from \"rxjs\";\nimport { fromFetch } from 'rxjs/fetch';\nimport BaseService from \"./baseService\";\nexport default class ExchangeService extends BaseService {\n  constructor() {\n    super('https://api.coingecko.com/api/v3/exchanges', {\n      page: 1,\n      per_page: 60\n    });\n  }\n\n  retrieve() {\n    let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const qp = this.getQueryParams(queryParams);\n    if (queryParams['page'] > 4) return of([]);\n    const url = this.getUrl(qp);\n\n    if (this.isCacheResponseValid(url)) {\n      return of(this.getFromCache(url));\n    }\n\n    return fromFetch(url).pipe(mergeMap(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return throwError(() => new Error(res.statusText));\n      }\n    }), mergeMap(res => {\n      this.putInCache(res, url, 5);\n      return of(res);\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/services/exchangesService.ts"],"names":["of","mergeMap","throwError","fromFetch","BaseService","ExchangeService","constructor","page","per_page","retrieve","queryParams","qp","getQueryParams","url","getUrl","isCacheResponseValid","getFromCache","pipe","res","ok","json","Error","statusText","putInCache"],"mappings":"AAAA,SAAqBA,EAArB,EAAyBC,QAAzB,EAAmCC,UAAnC,QAAqD,MAArD;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,MAAMC,eAAN,SAA8BD,WAA9B,CAAsD;AAEjEE,EAAAA,WAAW,GAAG;AACV,UAAM,4CAAN,EAAoD;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,QAAQ,EAAE;AAArB,KAApD;AAEH;;AAEMC,EAAAA,QAAQ,GAAgD;AAAA,QAA/CC,WAA+C,uEAA5B,EAA4B;AAC3D,UAAMC,EAAE,GAAG,KAAKC,cAAL,CAAoBF,WAApB,CAAX;AACA,QAAIA,WAAW,CAAC,MAAD,CAAX,GAAsB,CAA1B,EAA6B,OAAOV,EAAE,CAAC,EAAD,CAAT;AAE7B,UAAMa,GAAG,GAAG,KAAKC,MAAL,CAAYH,EAAZ,CAAZ;;AAEA,QAAI,KAAKI,oBAAL,CAA0BF,GAA1B,CAAJ,EAAoC;AAChC,aAAOb,EAAE,CAAC,KAAKgB,YAAL,CAAkBH,GAAlB,CAAD,CAAT;AACH;;AAED,WAAOV,SAAS,CAACU,GAAD,CAAT,CAAeI,IAAf,CACHhB,QAAQ,CAACiB,GAAG,IAAI;AACZ,UAAIA,GAAG,CAACC,EAAR,EAAY;AACR,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,OAFD,MAEO;AACH,eAAOlB,UAAU,CAAC,MAAM,IAAImB,KAAJ,CAAUH,GAAG,CAACI,UAAd,CAAP,CAAjB;AACH;AACJ,KANO,CADL,EAQHrB,QAAQ,CAACiB,GAAG,IAAI;AACZ,WAAKK,UAAL,CAAgBL,GAAhB,EAAqBL,GAArB,EAA0B,CAA1B;AACA,aAAOb,EAAE,CAACkB,GAAD,CAAT;AACH,KAHO,CARL,CAAP;AAaH;;AA9BgE","sourcesContent":["import { Observable, of, mergeMap, throwError } from \"rxjs\";\nimport { fromFetch } from 'rxjs/fetch';\nimport Exchange from \"../models/exchange\";\nimport BaseService from \"./baseService\";\n\nexport default class ExchangeService extends BaseService<Exchange[]> {\n\n    constructor() {\n        super('https://api.coingecko.com/api/v3/exchanges', { page: 1, per_page: 60 });\n\n    }\n\n    public retrieve(queryParams: any = {}): Observable<Exchange[]> {\n        const qp = this.getQueryParams(queryParams);\n        if (queryParams['page'] > 4) return of([]);\n\n        const url = this.getUrl(qp);\n\n        if (this.isCacheResponseValid(url)) {\n            return of(this.getFromCache(url));\n        }\n\n        return fromFetch(url).pipe(\n            mergeMap(res => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    return throwError(() => new Error(res.statusText))\n                }\n            }),\n            mergeMap(res => {\n                this.putInCache(res, url, 5);\n                return of(res);\n            })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}