{"ast":null,"code":"import { mergeMap, of, throwError } from \"rxjs\";\nimport { fromFetch } from \"rxjs/fetch\";\nimport BaseService from \"./baseService\";\nexport default class CoinsService extends BaseService {\n  constructor() {\n    super('https://coinranking1.p.rapidapi.com/coins', {\n      referenceCurrencyUuid: 'yhjMzLPhuIDl',\n      timePeriod: '3h',\n      tiers: '1',\n      orderBy: 'marketCap',\n      orderDirection: 'desc',\n      limit: '24',\n      offset: '0'\n    });\n    this.options = void 0;\n    this.options = {\n      headers: {\n        'x-rapidapi-host': process.env.REACT_APP_RAPID_API_COINRANKING_HOST,\n        'x-rapidapi-key': process.env.REACT_APP_RAPID_API_COINRANKING_KEY\n      }\n    };\n  }\n\n  retrieve() {\n    let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const qp = this.getQueryParams(queryParams);\n    if (queryParams['offset'] > 4 * 24) return of([]);\n    const url = this.getUrl(qp);\n\n    if (this.isCacheResponseValid(url)) {\n      return of(this.getFromCache(url));\n    }\n\n    return fromFetch(url, this.options).pipe(mergeMap(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return throwError(() => new Error(res.statusText));\n      }\n    }), mergeMap(res => {\n      const data = res['data']['coins'];\n      this.putInCache(data, url, 5);\n      return of(data);\n    })); // return from(this.fetchFakeData(coins.data.coins, 1000));\n  }\n\n}","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/services/coinsService.ts"],"names":["mergeMap","of","throwError","fromFetch","BaseService","CoinsService","constructor","referenceCurrencyUuid","timePeriod","tiers","orderBy","orderDirection","limit","offset","options","headers","process","env","REACT_APP_RAPID_API_COINRANKING_HOST","REACT_APP_RAPID_API_COINRANKING_KEY","retrieve","queryParams","qp","getQueryParams","url","getUrl","isCacheResponseValid","getFromCache","pipe","res","ok","json","Error","statusText","data","putInCache"],"mappings":"AAAA,SAASA,QAAT,EAA+BC,EAA/B,EAAmCC,UAAnC,QAAqD,MAArD;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,MAAMC,YAAN,SAA2BD,WAA3B,CAA8C;AAIzDE,EAAAA,WAAW,GAAG;AACV,UAAM,2CAAN,EAAmD;AAC/CC,MAAAA,qBAAqB,EAAE,cADwB;AAE/CC,MAAAA,UAAU,EAAE,IAFmC;AAG/CC,MAAAA,KAAK,EAAE,GAHwC;AAI/CC,MAAAA,OAAO,EAAE,WAJsC;AAK/CC,MAAAA,cAAc,EAAE,MAL+B;AAM/CC,MAAAA,KAAK,EAAE,IANwC;AAO/CC,MAAAA,MAAM,EAAE;AAPuC,KAAnD;AADU,SAFJC,OAEI;AAWV,SAAKA,OAAL,GAAe;AACXC,MAAAA,OAAO,EAAE;AACL,2BAAmBC,OAAO,CAACC,GAAR,CAAYC,oCAD1B;AAEL,0BAAkBF,OAAO,CAACC,GAAR,CAAYE;AAFzB;AADE,KAAf;AAMH;;AAEMC,EAAAA,QAAQ,GAA4C;AAAA,QAA3CC,WAA2C,uEAAxB,EAAwB;AACvD,UAAMC,EAAE,GAAG,KAAKC,cAAL,CAAoBF,WAApB,CAAX;AACA,QAAIA,WAAW,CAAC,QAAD,CAAX,GAAwB,IAAI,EAAhC,EAAoC,OAAOpB,EAAE,CAAC,EAAD,CAAT;AACpC,UAAMuB,GAAG,GAAG,KAAKC,MAAL,CAAYH,EAAZ,CAAZ;;AAEA,QAAI,KAAKI,oBAAL,CAA0BF,GAA1B,CAAJ,EAAoC;AAChC,aAAOvB,EAAE,CAAC,KAAK0B,YAAL,CAAkBH,GAAlB,CAAD,CAAT;AACH;;AAED,WAAOrB,SAAS,CAACqB,GAAD,EAAM,KAAKV,OAAX,CAAT,CAA6Bc,IAA7B,CACH5B,QAAQ,CAAE6B,GAAD,IAAc;AACnB,UAAIA,GAAG,CAACC,EAAR,EAAY;AACR,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,OAFD,MAEO;AACH,eAAO7B,UAAU,CAAC,MAAM,IAAI8B,KAAJ,CAAUH,GAAG,CAACI,UAAd,CAAP,CAAjB;AACH;AACJ,KANO,CADL,EAQHjC,QAAQ,CAAE6B,GAAD,IAAc;AACnB,YAAMK,IAAI,GAAGL,GAAG,CAAC,MAAD,CAAH,CAAY,OAAZ,CAAb;AACA,WAAKM,UAAL,CAAgBD,IAAhB,EAAsBV,GAAtB,EAA2B,CAA3B;AACA,aAAOvB,EAAE,CAACiC,IAAD,CAAT;AACH,KAJO,CARL,CAAP,CATuD,CAwBvD;AACH;;AAhDwD","sourcesContent":["import { mergeMap, Observable, of, throwError } from \"rxjs\";\nimport { fromFetch } from \"rxjs/fetch\";\nimport Coin from \"../models/coin\";\nimport BaseService from \"./baseService\";\n\nexport default class CoinsService extends BaseService<Coin[]>{\n\n    protected options: any;\n\n    constructor() {\n        super('https://coinranking1.p.rapidapi.com/coins', {\n            referenceCurrencyUuid: 'yhjMzLPhuIDl',\n            timePeriod: '3h',\n            tiers: '1',\n            orderBy: 'marketCap',\n            orderDirection: 'desc',\n            limit: '24',\n            offset: '0'\n        });\n\n        this.options = {\n            headers: {\n                'x-rapidapi-host': process.env.REACT_APP_RAPID_API_COINRANKING_HOST,\n                'x-rapidapi-key': process.env.REACT_APP_RAPID_API_COINRANKING_KEY\n            }\n        }\n    }\n\n    public retrieve(queryParams: any = {}): Observable<Coin[]> {\n        const qp = this.getQueryParams(queryParams);\n        if (queryParams['offset'] > 4 * 24) return of([]);\n        const url = this.getUrl(qp);\n\n        if (this.isCacheResponseValid(url)) {\n            return of(this.getFromCache(url));\n        }\n\n        return fromFetch(url, this.options).pipe(\n            mergeMap((res: any) => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    return throwError(() => new Error(res.statusText))\n                }\n            }),\n            mergeMap((res: any) => {\n                const data = res['data']['coins']\n                this.putInCache(data, url, 5);\n                return of(data);\n            })\n        );\n\n        // return from(this.fetchFakeData(coins.data.coins, 1000));\n    }\n}"]},"metadata":{},"sourceType":"module"}