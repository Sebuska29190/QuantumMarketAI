{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { OperatorSubscriber } from '../../operators/OperatorSubscriber';\nimport { Observable } from '../../Observable';\nimport { innerFrom } from '../../observable/innerFrom';\nexport function fromFetch(input, initWithSelector) {\n  if (initWithSelector === void 0) {\n    initWithSelector = {};\n  }\n\n  var selector = initWithSelector.selector,\n      init = __rest(initWithSelector, [\"selector\"]);\n\n  return new Observable(function (subscriber) {\n    var controller = new AbortController();\n    var signal = controller.signal;\n    var abortable = true;\n    var outerSignal = init.signal;\n\n    if (outerSignal) {\n      if (outerSignal.aborted) {\n        controller.abort();\n      } else {\n        var outerSignalHandler_1 = function () {\n          if (!signal.aborted) {\n            controller.abort();\n          }\n        };\n\n        outerSignal.addEventListener('abort', outerSignalHandler_1);\n        subscriber.add(function () {\n          return outerSignal.removeEventListener('abort', outerSignalHandler_1);\n        });\n      }\n    }\n\n    var perSubscriberInit = __assign(__assign({}, init), {\n      signal: signal\n    });\n\n    var handleError = function (err) {\n      abortable = false;\n      subscriber.error(err);\n    };\n\n    fetch(input, perSubscriberInit).then(function (response) {\n      if (selector) {\n        innerFrom(selector(response)).subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n          abortable = false;\n          subscriber.complete();\n        }, handleError));\n      } else {\n        abortable = false;\n        subscriber.next(response);\n        subscriber.complete();\n      }\n    }).catch(handleError);\n    return function () {\n      if (abortable) {\n        controller.abort();\n      }\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"module"}