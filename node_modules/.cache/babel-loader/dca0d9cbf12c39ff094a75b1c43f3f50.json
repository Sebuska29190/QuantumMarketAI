{"ast":null,"code":"import { mergeMap, of, throwError } from \"rxjs\";\nimport { fromFetch } from \"rxjs/fetch\";\nimport BaseService from \"./baseService\";\nexport default class NewsService extends BaseService {\n  constructor() {\n    super('https://free-news.p.rapidapi.com/v1/search', {\n      q: 'cryptocurrencies',\n      lang: 'en',\n      page: '1',\n      page_size: '24'\n    });\n    this.options = void 0;\n    this.options = {\n      headers: {\n        'x-rapidapi-host': process.env.REACT_APP_RAPID_API_FREENEWS_HOST,\n        'x-rapidapi-key': process.env.REACT_APP_RAPID_API_FREENEWS_KEY\n      }\n    };\n  }\n\n  getQueryParams(queryParams) {\n    queryParams['q'] = queryParams['q'] || this.queryParams['q'];\n    return super.getQueryParams(queryParams);\n  }\n\n  retrieve() {\n    let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const qp = this.getQueryParams(queryParams);\n    if (qp['page'] > 4) return of([]);\n    const url = this.getUrl(qp); // get response from cache if time passed is less then 5min from the first call\n\n    if (this.isCacheResponseValid(url)) {\n      return of(this.getFromCache(url));\n    }\n\n    return fromFetch(url, this.options).pipe(mergeMap(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return throwError(() => new Error(res.statusText));\n      }\n    }), mergeMap(res => {\n      this.putInCache(res['articles'], url, 5); // save response in cache for 5min\n\n      return of(res['articles']);\n    })); // return from(this.fetchFakeData(news.articles, 1000));\n  }\n\n}","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/services/newsService.ts"],"names":["mergeMap","of","throwError","fromFetch","BaseService","NewsService","constructor","q","lang","page","page_size","options","headers","process","env","REACT_APP_RAPID_API_FREENEWS_HOST","REACT_APP_RAPID_API_FREENEWS_KEY","getQueryParams","queryParams","retrieve","qp","url","getUrl","isCacheResponseValid","getFromCache","pipe","res","ok","json","Error","statusText","putInCache"],"mappings":"AAAA,SAASA,QAAT,EAA+BC,EAA/B,EAAmCC,UAAnC,QAAqD,MAArD;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,MAAMC,WAAN,SAA0BD,WAA1B,CAA8C;AAIzDE,EAAAA,WAAW,GAAG;AACV,UAAM,4CAAN,EAAoD;AAAEC,MAAAA,CAAC,EAAE,kBAAL;AAAyBC,MAAAA,IAAI,EAAE,IAA/B;AAAqCC,MAAAA,IAAI,EAAE,GAA3C;AAAgDC,MAAAA,SAAS,EAAE;AAA3D,KAApD;AADU,SAFJC,OAEI;AAEV,SAAKA,OAAL,GAAe;AACXC,MAAAA,OAAO,EAAE;AACL,2BAAmBC,OAAO,CAACC,GAAR,CAAYC,iCAD1B;AAEL,0BAAkBF,OAAO,CAACC,GAAR,CAAYE;AAFzB;AADE,KAAf;AAMH;;AAESC,EAAAA,cAAc,CAACC,WAAD,EAAmB;AACvCA,IAAAA,WAAW,CAAC,GAAD,CAAX,GAAmBA,WAAW,CAAC,GAAD,CAAX,IAAoB,KAAKA,WAAL,CAAiB,GAAjB,CAAvC;AACA,WAAO,MAAMD,cAAN,CAAqBC,WAArB,CAAP;AACH;;AAEMC,EAAAA,QAAQ,GAA4C;AAAA,QAA3CD,WAA2C,uEAAxB,EAAwB;AACvD,UAAME,EAAE,GAAG,KAAKH,cAAL,CAAoBC,WAApB,CAAX;AACA,QAAIE,EAAE,CAAC,MAAD,CAAF,GAAa,CAAjB,EAAoB,OAAOnB,EAAE,CAAC,EAAD,CAAT;AACpB,UAAMoB,GAAG,GAAG,KAAKC,MAAL,CAAYF,EAAZ,CAAZ,CAHuD,CAKvD;;AACA,QAAI,KAAKG,oBAAL,CAA0BF,GAA1B,CAAJ,EAAoC;AAChC,aAAOpB,EAAE,CAAC,KAAKuB,YAAL,CAAkBH,GAAlB,CAAD,CAAT;AACH;;AAED,WAAOlB,SAAS,CAACkB,GAAD,EAAM,KAAKV,OAAX,CAAT,CAA6Bc,IAA7B,CACHzB,QAAQ,CAAE0B,GAAD,IAAc;AACnB,UAAIA,GAAG,CAACC,EAAR,EAAY;AACR,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,OAFD,MAEO;AACH,eAAO1B,UAAU,CAAC,MAAM,IAAI2B,KAAJ,CAAUH,GAAG,CAACI,UAAd,CAAP,CAAjB;AACH;AACJ,KANO,CADL,EAQH9B,QAAQ,CAAE0B,GAAD,IAAc;AACnB,WAAKK,UAAL,CAAgBL,GAAG,CAAC,UAAD,CAAnB,EAAiCL,GAAjC,EAAsC,CAAtC,EADmB,CACuB;;AAC1C,aAAOpB,EAAE,CAACyB,GAAG,CAAC,UAAD,CAAJ,CAAT;AACH,KAHO,CARL,CAAP,CAVuD,CAuBvD;AACH;;AA3CwD","sourcesContent":["import { mergeMap, Observable, of, throwError } from \"rxjs\";\nimport { fromFetch } from \"rxjs/fetch\";\nimport News from \"../models/news\";\nimport BaseService from \"./baseService\";\n\nexport default class NewsService extends BaseService<News[]> {\n\n    protected options: any;\n\n    constructor() {\n        super('https://free-news.p.rapidapi.com/v1/search', { q: 'cryptocurrencies', lang: 'en', page: '1', page_size: '24' });\n        this.options = {\n            headers: {\n                'x-rapidapi-host': process.env.REACT_APP_RAPID_API_FREENEWS_HOST,\n                'x-rapidapi-key': process.env.REACT_APP_RAPID_API_FREENEWS_KEY\n            }\n        }\n    }\n\n    protected getQueryParams(queryParams: any) {\n        queryParams['q'] = queryParams['q'] || this.queryParams['q'];\n        return super.getQueryParams(queryParams);\n    }\n\n    public retrieve(queryParams: any = {}): Observable<News[]> {\n        const qp = this.getQueryParams(queryParams);\n        if (qp['page'] > 4) return of([]);\n        const url = this.getUrl(qp);\n\n        // get response from cache if time passed is less then 5min from the first call\n        if (this.isCacheResponseValid(url)) {\n            return of(this.getFromCache(url));\n        }\n\n        return fromFetch(url, this.options).pipe(\n            mergeMap((res: any) => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    return throwError(() => new Error(res.statusText));\n                }\n            }),\n            mergeMap((res: any) => {\n                this.putInCache(res['articles'], url, 5); // save response in cache for 5min\n                return of(res['articles']);\n            })\n        ) as Observable<News[]>\n        // return from(this.fetchFakeData(news.articles, 1000));\n    }\n}"]},"metadata":{},"sourceType":"module"}