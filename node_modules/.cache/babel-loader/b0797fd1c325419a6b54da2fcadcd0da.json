{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { tap } from \"rxjs\";\nimport { coinsService } from \"../services\";\nconst initState = {\n  data: []\n};\nconst coinsSlice = createSlice({\n  name: 'coins',\n  initialState: initState,\n  reducers: {\n    setCoins: (state, action) => {\n      state.data = action.payload;\n    }\n  }\n});\nconst {\n  setCoins\n} = coinsSlice.actions;\n\nconst retrieveCoinsAction = (state, dispatch, queryParams) => {\n  return coinsService.retrieve(queryParams).pipe(tap(data => {\n    if (queryParams['offset'] === 0) {\n      dispatch(setCoins(data));\n    } else {\n      dispatch(setCoins(state.data.concat(data)));\n    }\n  }));\n};\n\nexport { coinsSlice, retrieveCoinsAction };","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/store/coinsSlice.ts"],"names":["createSlice","tap","coinsService","initState","data","coinsSlice","name","initialState","reducers","setCoins","state","action","payload","actions","retrieveCoinsAction","dispatch","queryParams","retrieve","pipe","concat"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAAqBC,GAArB,QAAgC,MAAhC;AAGA,SAASC,YAAT,QAA6B,aAA7B;AAMA,MAAMC,SAAqB,GAAG;AAC1BC,EAAAA,IAAI,EAAE;AADoB,CAA9B;AAIA,MAAMC,UAAU,GAAGL,WAAW,CAAC;AAC3BM,EAAAA,IAAI,EAAE,OADqB;AAE3BC,EAAAA,YAAY,EAAEJ,SAFa;AAG3BK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AAChDD,MAAAA,KAAK,CAACN,IAAN,GAAaO,MAAM,CAACC,OAApB;AACH;AAHK;AAHiB,CAAD,CAA9B;AAUA,MAAM;AAAEH,EAAAA;AAAF,IAAeJ,UAAU,CAACQ,OAAhC;;AAEA,MAAMC,mBAAmB,GAAG,CAACJ,KAAD,EAAoBK,QAApB,EAA2CC,WAA3C,KAAoF;AAC5G,SAAOd,YAAY,CAACe,QAAb,CAAsBD,WAAtB,EAAmCE,IAAnC,CACHjB,GAAG,CAACG,IAAI,IAAI;AACR,QAAIY,WAAW,CAAC,QAAD,CAAX,KAA0B,CAA9B,EAAiC;AAC7BD,MAAAA,QAAQ,CAACN,QAAQ,CAACL,IAAD,CAAT,CAAR;AACH,KAFD,MAEO;AACHW,MAAAA,QAAQ,CAACN,QAAQ,CAACC,KAAK,CAACN,IAAN,CAAWe,MAAX,CAAkBf,IAAlB,CAAD,CAAT,CAAR;AACH;AACJ,GANE,CADA,CAAP;AASH,CAVD;;AAYA,SAASC,UAAT,EAAqBS,mBAArB","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Observable, tap } from \"rxjs\";\nimport { AppDispatch } from \".\";\nimport Coin from \"../models/coin\";\nimport { coinsService } from \"../services\";\n\ntype CoinsState = {\n    data: Coin[];\n}\n\nconst initState: CoinsState = {\n    data: []\n}\n\nconst coinsSlice = createSlice({\n    name: 'coins',\n    initialState: initState,\n    reducers: {\n        setCoins: (state, action: PayloadAction<Coin[]>) => {\n            state.data = action.payload;\n        }\n    }\n});\n\nconst { setCoins } = coinsSlice.actions;\n\nconst retrieveCoinsAction = (state: CoinsState, dispatch: AppDispatch, queryParams: any): Observable<Coin[]> => {\n    return coinsService.retrieve(queryParams).pipe(\n        tap(data => {\n            if (queryParams['offset'] === 0) {\n                dispatch(setCoins(data));\n            } else {\n                dispatch(setCoins(state.data.concat(data)));\n            }\n        })\n    );\n}\n\nexport { coinsSlice, retrieveCoinsAction };"]},"metadata":{},"sourceType":"module"}