{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { mergeMap, tap } from \"rxjs\";\nimport { coinDetailService, coinHistoryService } from \"../services\";\nconst initState = {\n  data: {},\n  history: []\n};\nconst coinDetailSlice = createSlice({\n  name: 'coinDetail',\n  initialState: initState,\n  reducers: {\n    setCoinDetail: (state, action) => {\n      state.data = action.payload;\n    },\n    setCoinHistory: (state, action) => {\n      state.history = action.payload;\n    }\n  }\n});\nconst {\n  setCoinDetail,\n  setCoinHistory\n} = coinDetailSlice.actions;\n\nconst retrieveCoinDetailAction = (dispatch, queryParams, id) => {\n  return coinDetailService.retrieve(queryParams, id).pipe(mergeMap(data => {\n    dispatch(setCoinDetail(data));\n    return coinHistoryService.retrieve(queryParams, id);\n  }), tap(data => {\n    dispatch(setCoinHistory([...data].reverse()));\n  }));\n};\n\nexport { coinDetailSlice, retrieveCoinDetailAction };","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/store/coinDetailSlice.ts"],"names":["createSlice","mergeMap","tap","coinDetailService","coinHistoryService","initState","data","history","coinDetailSlice","name","initialState","reducers","setCoinDetail","state","action","payload","setCoinHistory","actions","retrieveCoinDetailAction","dispatch","queryParams","id","retrieve","pipe","reverse"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,QAAT,EAA+BC,GAA/B,QAA0C,MAA1C;AAIA,SAASC,iBAAT,EAA4BC,kBAA5B,QAAsD,aAAtD;AAOA,MAAMC,SAA0B,GAAG;AAC/BC,EAAAA,IAAI,EAAE,EADyB;AAE/BC,EAAAA,OAAO,EAAE;AAFsB,CAAnC;AAKA,MAAMC,eAAe,GAAGR,WAAW,CAAC;AAChCS,EAAAA,IAAI,EAAE,YAD0B;AAEhCC,EAAAA,YAAY,EAAEL,SAFkB;AAGhCM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA8C;AACzDD,MAAAA,KAAK,CAACP,IAAN,GAAaQ,MAAM,CAACC,OAApB;AACH,KAHK;AAINC,IAAAA,cAAc,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAiD;AAC7DD,MAAAA,KAAK,CAACN,OAAN,GAAgBO,MAAM,CAACC,OAAvB;AACH;AANK;AAHsB,CAAD,CAAnC;AAaA,MAAM;AAAEH,EAAAA,aAAF;AAAiBI,EAAAA;AAAjB,IAAoCR,eAAe,CAACS,OAA1D;;AAEA,MAAMC,wBAAwB,GAAG,CAACC,QAAD,EAAwBC,WAAxB,EAA0CC,EAA1C,KAA0E;AACvG,SAAOlB,iBAAiB,CAACmB,QAAlB,CAA2BF,WAA3B,EAAwCC,EAAxC,EAA4CE,IAA5C,CACHtB,QAAQ,CAACK,IAAI,IAAI;AACba,IAAAA,QAAQ,CAACP,aAAa,CAACN,IAAD,CAAd,CAAR;AACA,WAAOF,kBAAkB,CAACkB,QAAnB,CAA4BF,WAA5B,EAAyCC,EAAzC,CAAP;AACH,GAHO,CADL,EAKHnB,GAAG,CAACI,IAAI,IAAI;AACRa,IAAAA,QAAQ,CAACH,cAAc,CAAC,CAAC,GAAGV,IAAJ,EAAUkB,OAAV,EAAD,CAAf,CAAR;AACH,GAFE,CALA,CAAP;AASH,CAVD;;AAYA,SAAShB,eAAT,EAA0BU,wBAA1B","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { mergeMap, Observable, tap } from \"rxjs\";\nimport { AppDispatch } from \".\";\nimport CoinDetail from \"../models/coinDetail\";\nimport CoinHistory from \"../models/CoinHistory\";\nimport { coinDetailService, coinHistoryService } from \"../services\";\n\ntype CoinDetailState = {\n    data: CoinDetail;\n    history: CoinHistory[];\n}\n\nconst initState: CoinDetailState = {\n    data: {} as CoinDetail,\n    history: []\n};\n\nconst coinDetailSlice = createSlice({\n    name: 'coinDetail',\n    initialState: initState,\n    reducers: {\n        setCoinDetail: (state, action: PayloadAction<CoinDetail>) => {\n            state.data = action.payload;\n        },\n        setCoinHistory: (state, action: PayloadAction<CoinHistory[]>) => {\n            state.history = action.payload;\n        }\n    }\n});\n\nconst { setCoinDetail, setCoinHistory } = coinDetailSlice.actions;\n\nconst retrieveCoinDetailAction = (dispatch: AppDispatch, queryParams: any, id: string): Observable<any> => {\n    return coinDetailService.retrieve(queryParams, id).pipe(\n        mergeMap(data => {\n            dispatch(setCoinDetail(data));\n            return coinHistoryService.retrieve(queryParams, id)\n        }),\n        tap(data => {\n            dispatch(setCoinHistory([...data].reverse()));\n        })\n    );\n}\n\nexport { coinDetailSlice, retrieveCoinDetailAction };"]},"metadata":{},"sourceType":"module"}