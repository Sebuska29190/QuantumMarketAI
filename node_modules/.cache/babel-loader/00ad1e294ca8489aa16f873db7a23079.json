{"ast":null,"code":"var _jsxFileName = \"/home/sebastian/Pobrane/cryptowatch/src/pages/Layout/AppNavBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport MuiAppBar from '@mui/material/AppBar';\nimport { drawerWidth } from './constants';\nimport { IconButton, Skeleton, Toolbar } from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Brand from './Brand';\nimport { initAction, selectCurrencyAction } from '../../store/navbarSlice';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport CurrenciesRef from './CurrenciesRef';\nimport Stats from './Stats';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: prop => prop !== 'open'\n})(_ref => {\n  let {\n    theme,\n    open\n  } = _ref;\n  return {\n    backgroundColor: theme.palette.common.white,\n    color: theme.palette.text.primary,\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    ...(open && {\n      marginLeft: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    })\n  };\n});\n_c = AppBar;\n\nfunction AppNavBar(_ref2) {\n  _s();\n\n  let {\n    open,\n    handleDrawerOpen\n  } = _ref2;\n  const [loading, setLoading] = useState(true);\n  const [statsLoading, setStatsLoading] = useState(false);\n  const dispatch = useAppDispatch();\n  const navbarState = useAppSelector(state => state.navbar);\n\n  const handleCurrencyChange = currencyRef => {\n    setStatsLoading(true);\n    selectCurrencyAction(dispatch, currencyRef).subscribe(_ => setStatsLoading(false));\n  };\n\n  useEffect(() => {\n    const subscription = initAction(dispatch).subscribe(_ => setLoading(false));\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(AppBar, {\n    position: \"fixed\",\n    open: open,\n    children: /*#__PURE__*/_jsxDEV(Toolbar, {\n      variant: \"dense\",\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"inherit\",\n        \"aria-label\": \"open drawer\",\n        onClick: handleDrawerOpen,\n        edge: \"start\",\n        sx: {\n          marginRight: '36px',\n          ...(open && {\n            display: 'none'\n          })\n        },\n        children: /*#__PURE__*/_jsxDEV(MenuIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), !open && /*#__PURE__*/_jsxDEV(Brand, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1,\n          overflowX: 'auto'\n        },\n        children: loading || statsLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 39\n        }, this) : /*#__PURE__*/_jsxDEV(Stats, {\n          stats: navbarState.stats,\n          currencySign: navbarState.selectedCurrency.sign || navbarState.selectedCurrency.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: loading ? /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 23\n        }, this) : /*#__PURE__*/_jsxDEV(CurrenciesRef, {\n          currencies: navbarState.currenciesRef,\n          selectedCurrency: navbarState.selectedCurrency,\n          onCurrencyChange: handleCurrencyChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AppNavBar, \"f84phrNDSD/zem2VTlqlEUyOqO0=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n\n_c2 = AppNavBar;\nexport default AppNavBar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppBar\");\n$RefreshReg$(_c2, \"AppNavBar\");","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/pages/Layout/AppNavBar.tsx"],"names":["React","useEffect","useState","styled","MuiAppBar","drawerWidth","IconButton","Skeleton","Toolbar","MenuIcon","Brand","initAction","selectCurrencyAction","useAppDispatch","useAppSelector","CurrenciesRef","Stats","AppBar","shouldForwardProp","prop","theme","open","backgroundColor","palette","common","white","color","text","primary","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","width","enteringScreen","AppNavBar","handleDrawerOpen","loading","setLoading","statsLoading","setStatsLoading","dispatch","navbarState","state","navbar","handleCurrencyChange","currencyRef","subscribe","_","subscription","unsubscribe","marginRight","display","flexGrow","overflowX","stats","selectedCurrency","sign","symbol","alignItems","currenciesRef"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\nimport { drawerWidth } from './constants';\nimport { IconButton, Skeleton, Toolbar } from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Brand from './Brand';\nimport { initAction, selectCurrencyAction } from '../../store/navbarSlice';\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\nimport CurrenciesRef from './CurrenciesRef';\nimport Stats from './Stats';\nimport CurrencyRef from '../../models/currencyRef';\n\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean;\n}\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})<AppBarProps>(({ theme, open }) => ({\n  backgroundColor: theme.palette.common.white,\n  color: theme.palette.text.primary,\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create(['width', 'margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n\ninterface Props {\n  open: boolean,\n  handleDrawerOpen: () => void\n}\n\nfunction AppNavBar({ open, handleDrawerOpen }: Props) {\n\n  const [loading, setLoading] = useState(true);\n  const [statsLoading, setStatsLoading] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const navbarState = useAppSelector(state => state.navbar);\n\n  const handleCurrencyChange = (currencyRef: CurrencyRef) => {\n    setStatsLoading(true);\n    selectCurrencyAction(dispatch, currencyRef).subscribe(_ => setStatsLoading(false));\n  }\n\n  useEffect(() => {\n    const subscription = initAction(dispatch).subscribe(_ => setLoading(false));\n\n    return () => {\n      subscription.unsubscribe();\n    }\n  }, [dispatch]);\n\n  return (\n    <AppBar position=\"fixed\" open={open}>\n      <Toolbar variant=\"dense\">\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          onClick={handleDrawerOpen}\n          edge=\"start\"\n          sx={{\n            marginRight: '36px',\n            ...(open && { display: 'none' }),\n          }}\n        >\n          <MenuIcon />\n        </IconButton>\n        {!open && <Brand />}\n        <div style={{ flexGrow: 1, overflowX: 'auto' }}>\n          {\n            loading || statsLoading ? <Skeleton /> : (\n              <Stats stats={navbarState.stats} currencySign={navbarState.selectedCurrency.sign || navbarState.selectedCurrency.symbol} />\n            )\n          }\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          {\n            loading ? <Skeleton /> : (\n              <CurrenciesRef currencies={navbarState.currenciesRef} selectedCurrency={navbarState.selectedCurrency} onCurrencyChange={handleCurrencyChange} />\n            )\n          }\n          {/* <ThemeSwitch /> */}\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default AppNavBar;\n"]},"metadata":{},"sourceType":"module"}