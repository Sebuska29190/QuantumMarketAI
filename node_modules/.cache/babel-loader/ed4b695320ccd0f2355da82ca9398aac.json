{"ast":null,"code":"import { mergeMap, of, throwError } from \"rxjs\";\nimport { fromFetch } from \"rxjs/fetch\";\nimport BaseService from \"./baseService\";\nexport default class CoinDetailService extends BaseService {\n  constructor() {\n    super('https://coinranking1.p.rapidapi.com/coin', {\n      timePeriod: '3h'\n    });\n    this.options = void 0;\n    this.options = {\n      headers: {\n        'x-rapidapi-host': process.env.REACT_APP_RAPID_API_COINRANKING_HOST,\n        'x-rapidapi-key': process.env.REACT_APP_RAPID_API_COINRANKING_KEY\n      }\n    };\n  }\n\n  getUrlWithParams(queryParams, id) {\n    const url = new URL(`${this.endpoint}/${id}`);\n\n    for (let key in queryParams) {\n      url.searchParams.set(key, queryParams[key]);\n    }\n\n    return url.href;\n  }\n\n  retrieve() {\n    let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let id = arguments.length > 1 ? arguments[1] : undefined;\n    const qp = this.getQueryParams(queryParams);\n    const url = this.getUrlWithParams(qp, id);\n\n    if (this.isCacheResponseValid(url)) {\n      return of(this.getFromCache(url));\n    }\n\n    return fromFetch(url, this.options).pipe(mergeMap(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return throwError(() => new Error(res.statusText));\n      }\n    }), mergeMap(res => {\n      const data = res['data']['coin'];\n      this.putInCache(data, url, 5);\n      return of(data);\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/services/coinDetailService.ts"],"names":["mergeMap","of","throwError","fromFetch","BaseService","CoinDetailService","constructor","timePeriod","options","headers","process","env","REACT_APP_RAPID_API_COINRANKING_HOST","REACT_APP_RAPID_API_COINRANKING_KEY","getUrlWithParams","queryParams","id","url","URL","endpoint","key","searchParams","set","href","retrieve","qp","getQueryParams","isCacheResponseValid","getFromCache","pipe","res","ok","json","Error","statusText","data","putInCache"],"mappings":"AAAA,SAASA,QAAT,EAA+BC,EAA/B,EAAmCC,UAAnC,QAAqD,MAArD;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,MAAMC,iBAAN,SAAgCD,WAAhC,CAAwD;AAInEE,EAAAA,WAAW,GAAG;AACV,UAAM,0CAAN,EAAkD;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAlD;AADU,SAFJC,OAEI;AAEV,SAAKA,OAAL,GAAe;AACXC,MAAAA,OAAO,EAAE;AACL,2BAAmBC,OAAO,CAACC,GAAR,CAAYC,oCAD1B;AAEL,0BAAkBF,OAAO,CAACC,GAAR,CAAYE;AAFzB;AADE,KAAf;AAMH;;AAESC,EAAAA,gBAAgB,CAACC,WAAD,EAAmBC,EAAnB,EAAuC;AAC7D,UAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAS,GAAE,KAAKC,QAAS,IAAGH,EAAG,EAA/B,CAAZ;;AACA,SAAK,IAAII,GAAT,IAAgBL,WAAhB,EAA6B;AACzBE,MAAAA,GAAG,CAACI,YAAJ,CAAiBC,GAAjB,CAAqBF,GAArB,EAA0BL,WAAW,CAACK,GAAD,CAArC;AACH;;AACD,WAAOH,GAAG,CAACM,IAAX;AACH;;AAEMC,EAAAA,QAAQ,GAAuD;AAAA,QAAtDT,WAAsD,uEAAxC,EAAwC;AAAA,QAApCC,EAAoC;AAClE,UAAMS,EAAE,GAAG,KAAKC,cAAL,CAAoBX,WAApB,CAAX;AACA,UAAME,GAAG,GAAG,KAAKH,gBAAL,CAAsBW,EAAtB,EAA0BT,EAA1B,CAAZ;;AAEA,QAAI,KAAKW,oBAAL,CAA0BV,GAA1B,CAAJ,EAAoC;AAChC,aAAOhB,EAAE,CAAC,KAAK2B,YAAL,CAAkBX,GAAlB,CAAD,CAAT;AACH;;AAED,WAAOd,SAAS,CAACc,GAAD,EAAM,KAAKT,OAAX,CAAT,CAA6BqB,IAA7B,CACH7B,QAAQ,CAAE8B,GAAD,IAAc;AACnB,UAAIA,GAAG,CAACC,EAAR,EAAY;AACR,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,OAFD,MAEO;AACH,eAAO9B,UAAU,CAAC,MAAM,IAAI+B,KAAJ,CAAUH,GAAG,CAACI,UAAd,CAAP,CAAjB;AACH;AACJ,KANO,CADL,EAQHlC,QAAQ,CAAE8B,GAAD,IAAc;AACnB,YAAMK,IAAI,GAAGL,GAAG,CAAC,MAAD,CAAH,CAAY,MAAZ,CAAb;AACA,WAAKM,UAAL,CAAgBD,IAAhB,EAAsBlB,GAAtB,EAA2B,CAA3B;AACA,aAAOhB,EAAE,CAACkC,IAAD,CAAT;AACH,KAJO,CARL,CAAP;AAcH;;AA5CkE","sourcesContent":["import { mergeMap, Observable, of, throwError } from \"rxjs\";\nimport { fromFetch } from \"rxjs/fetch\";\nimport CoinDetail from \"../models/coinDetail\";\nimport BaseService from \"./baseService\";\n\nexport default class CoinDetailService extends BaseService<CoinDetail> {\n\n    protected options: any;\n\n    constructor() {\n        super('https://coinranking1.p.rapidapi.com/coin', { timePeriod: '3h' });\n        this.options = {\n            headers: {\n                'x-rapidapi-host': process.env.REACT_APP_RAPID_API_COINRANKING_HOST,\n                'x-rapidapi-key': process.env.REACT_APP_RAPID_API_COINRANKING_KEY\n            }\n        }\n    }\n\n    protected getUrlWithParams(queryParams: any, id: string): string {\n        const url = new URL(`${this.endpoint}/${id}`);\n        for (let key in queryParams) {\n            url.searchParams.set(key, queryParams[key]);\n        }\n        return url.href;\n    }\n\n    public retrieve(queryParams = {}, id: string): Observable<CoinDetail> {\n        const qp = this.getQueryParams(queryParams);\n        const url = this.getUrlWithParams(qp, id);\n\n        if (this.isCacheResponseValid(url)) {\n            return of(this.getFromCache(url));\n        }\n\n        return fromFetch(url, this.options).pipe(\n            mergeMap((res: any) => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    return throwError(() => new Error(res.statusText));\n                }\n            }),\n            mergeMap((res: any) => {\n                const data = res['data']['coin'];\n                this.putInCache(data, url, 5);\n                return of(data);\n            })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}