{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { mergeMap, tap } from \"rxjs\";\nimport { currenciesRefService, globalStatsService } from '../services';\nconst initState = {\n  stats: {},\n  currenciesRef: [],\n  selectedCurrency: {}\n};\nconst navbarSlice = createSlice({\n  name: 'navbar',\n  initialState: initState,\n  reducers: {\n    setGlobalStats: (state, action) => {\n      state.stats = action.payload;\n    },\n    setCurrenciesRef: (state, action) => {\n      state.currenciesRef = action.payload;\n      state.selectedCurrency = action.payload[0];\n    },\n    setNavbarState: (state, action) => {\n      // aggregate the state change used in order to minimize the number of calling useAppSelector\n      state.stats = action.payload.stats;\n      state.selectedCurrency = action.payload.selectedCurrency;\n    }\n  }\n});\nconst {\n  setGlobalStats,\n  setCurrenciesRef,\n  setNavbarState\n} = navbarSlice.actions;\n\nconst initAction = dispatch => {\n  return currenciesRefService.retrieve().pipe(mergeMap(currenciesRef => {\n    dispatch(setCurrenciesRef(currenciesRef));\n    return globalStatsService.retrieve({\n      referenceCurrencyUuid: currenciesRef[0].uuid\n    });\n  }), tap(stats => {\n    dispatch(setGlobalStats(stats));\n  }));\n};\n\nconst selectCurrencyAction = (dispatch, currencyRef) => {\n  return globalStatsService.retrieve({\n    referenceCurrencyUuid: currencyRef.uuid\n  }).pipe(tap(stats => {\n    dispatch(setNavbarState({\n      stats: stats,\n      selectedCurrency: currencyRef\n    }));\n  }));\n};\n\nexport { navbarSlice, initAction, selectCurrencyAction };","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/store/navbarSlice.ts"],"names":["createSlice","mergeMap","tap","currenciesRefService","globalStatsService","initState","stats","currenciesRef","selectedCurrency","navbarSlice","name","initialState","reducers","setGlobalStats","state","action","payload","setCurrenciesRef","setNavbarState","actions","initAction","dispatch","retrieve","pipe","referenceCurrencyUuid","uuid","selectCurrencyAction","currencyRef"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,QAAT,EAA+BC,GAA/B,QAA0C,MAA1C;AAIA,SAASC,oBAAT,EAA+BC,kBAA/B,QAAyD,aAAzD;AAQA,MAAMC,SAAsB,GAAG;AAC3BC,EAAAA,KAAK,EAAE,EADoB;AAE3BC,EAAAA,aAAa,EAAE,EAFY;AAG3BC,EAAAA,gBAAgB,EAAE;AAHS,CAA/B;AAMA,MAAMC,WAAW,GAAGT,WAAW,CAAC;AAC5BU,EAAAA,IAAI,EAAE,QADsB;AAE5BC,EAAAA,YAAY,EAAEN,SAFc;AAG5BO,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA+C;AAC3DD,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAArB;AACH,KAHK;AAINC,IAAAA,gBAAgB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAiD;AAC/DD,MAAAA,KAAK,CAACP,aAAN,GAAsBQ,MAAM,CAACC,OAA7B;AACAF,MAAAA,KAAK,CAACN,gBAAN,GAAyBO,MAAM,CAACC,OAAP,CAAe,CAAf,CAAzB;AACH,KAPK;AAQNE,IAAAA,cAAc,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAAE;AACjCD,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAAP,CAAeV,KAA7B;AACAQ,MAAAA,KAAK,CAACN,gBAAN,GAAyBO,MAAM,CAACC,OAAP,CAAeR,gBAAxC;AACH;AAXK;AAHkB,CAAD,CAA/B;AAkBA,MAAM;AAAEK,EAAAA,cAAF;AAAkBI,EAAAA,gBAAlB;AAAoCC,EAAAA;AAApC,IAAuDT,WAAW,CAACU,OAAzE;;AAEA,MAAMC,UAAU,GAAIC,QAAD,IAA4C;AAC3D,SAAOlB,oBAAoB,CAACmB,QAArB,GAAgCC,IAAhC,CACHtB,QAAQ,CAACM,aAAa,IAAI;AACtBc,IAAAA,QAAQ,CAACJ,gBAAgB,CAACV,aAAD,CAAjB,CAAR;AACA,WAAOH,kBAAkB,CAACkB,QAAnB,CAA4B;AAAEE,MAAAA,qBAAqB,EAAEjB,aAAa,CAAC,CAAD,CAAb,CAAiBkB;AAA1C,KAA5B,CAAP;AACH,GAHO,CADL,EAKHvB,GAAG,CAACI,KAAK,IAAI;AACTe,IAAAA,QAAQ,CAACR,cAAc,CAACP,KAAD,CAAf,CAAR;AACH,GAFE,CALA,CAAP;AASH,CAVD;;AAYA,MAAMoB,oBAAoB,GAAG,CAACL,QAAD,EAAwBM,WAAxB,KAAqD;AAC9E,SAAOvB,kBAAkB,CAACkB,QAAnB,CAA4B;AAAEE,IAAAA,qBAAqB,EAAEG,WAAW,CAACF;AAArC,GAA5B,EAAyEF,IAAzE,CACHrB,GAAG,CAACI,KAAK,IAAI;AACTe,IAAAA,QAAQ,CAACH,cAAc,CAAC;AACpBZ,MAAAA,KAAK,EAAEA,KADa;AAEpBE,MAAAA,gBAAgB,EAAEmB;AAFE,KAAD,CAAf,CAAR;AAIH,GALE,CADA,CAAP;AAQH,CATD;;AAWA,SAASlB,WAAT,EAAsBW,UAAtB,EAAkCM,oBAAlC","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { mergeMap, Observable, tap } from \"rxjs\";\nimport { AppDispatch } from \".\";\nimport CurrencyRef from \"../models/currencyRef\";\nimport GlobalStats from \"../models/globalStats\";\nimport { currenciesRefService, globalStatsService } from '../services';\n\ntype NavbarState = {\n    stats: GlobalStats;\n    currenciesRef: CurrencyRef[];\n    selectedCurrency: CurrencyRef;\n}\n\nconst initState: NavbarState = {\n    stats: {} as GlobalStats,\n    currenciesRef: [],\n    selectedCurrency: {} as CurrencyRef\n}\n\nconst navbarSlice = createSlice({\n    name: 'navbar',\n    initialState: initState,\n    reducers: {\n        setGlobalStats: (state, action: PayloadAction<GlobalStats>) => {\n            state.stats = action.payload;\n        },\n        setCurrenciesRef: (state, action: PayloadAction<CurrencyRef[]>) => {\n            state.currenciesRef = action.payload;\n            state.selectedCurrency = action.payload[0];\n        },\n        setNavbarState: (state, action) => { // aggregate the state change used in order to minimize the number of calling useAppSelector\n            state.stats = action.payload.stats;\n            state.selectedCurrency = action.payload.selectedCurrency;\n        }\n    }\n});\n\nconst { setGlobalStats, setCurrenciesRef, setNavbarState } = navbarSlice.actions;\n\nconst initAction = (dispatch: AppDispatch): Observable<any> => {\n    return currenciesRefService.retrieve().pipe(\n        mergeMap(currenciesRef => {\n            dispatch(setCurrenciesRef(currenciesRef));\n            return globalStatsService.retrieve({ referenceCurrencyUuid: currenciesRef[0].uuid });\n        }),\n        tap(stats => {\n            dispatch(setGlobalStats(stats));\n        })\n    );\n}\n\nconst selectCurrencyAction = (dispatch: AppDispatch, currencyRef: CurrencyRef) => {\n    return globalStatsService.retrieve({ referenceCurrencyUuid: currencyRef.uuid }).pipe(\n        tap(stats => {\n            dispatch(setNavbarState({\n                stats: stats,\n                selectedCurrency: currencyRef\n            }));\n        })\n    );\n}\n\nexport { navbarSlice, initAction, selectCurrencyAction };"]},"metadata":{},"sourceType":"module"}