{"ast":null,"code":"var _jsxFileName = \"/home/sebastian/Pobrane/cryptowatch/src/pages/Exchanges.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, Skeleton } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Subject, takeUntil } from 'rxjs';\nimport ExchangesList from '../components/ExchangesList';\nimport ExchangesListSkeleton from '../components/ExchangesListSkeleton';\nimport { retrieveExchangesAction } from '../store/exchangesSlice';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Exchanges() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [destroy$] = useState(new Subject());\n  const exchangesState = useAppSelector(state => state.exchanges);\n  const dispatch = useAppDispatch();\n\n  const retrieveExchanges = () => {\n    retrieveExchangesAction(exchangesState, dispatch, {\n      page\n    }).pipe(takeUntil(destroy$)).subscribe(res => {\n      if (page === 1) {\n        // reset loading for initial call\n        setLoading(false);\n      }\n\n      if (res.length < 60) {\n        // assuming page size is 60\n        setHasMore(false);\n      }\n\n      if (res.length > 0) {\n        // we don't need to increment the offset if there is no more data to fetch\n        setPage(page + 1);\n      }\n    });\n  };\n\n  useEffect(() => {\n    window.scroll({\n      top: 0\n    }); // scroll to top to prevent fetching next page\n\n    retrieveExchanges();\n    return () => {\n      destroy$.next();\n      destroy$.complete();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: /*#__PURE__*/_jsxDEV(ExchangesListSkeleton, {\n      size: 24\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    style: {\n      overflow: \"inherit\"\n    },\n    next: retrieveExchanges,\n    dataLength: exchangesState.data.length,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"60%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }, this),\n    scrollThreshold: \"20px\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(ExchangesList, {\n        exchanges: exchangesState.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Exchanges, \"BrTG+jhuKwOOkXkb53ZvsB52c3M=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});\n\n_c = Exchanges;\nexport default Exchanges;\n\nvar _c;\n\n$RefreshReg$(_c, \"Exchanges\");","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/pages/Exchanges.tsx"],"names":["Grid","Skeleton","React","useEffect","useState","InfiniteScroll","Subject","takeUntil","ExchangesList","ExchangesListSkeleton","retrieveExchangesAction","useAppDispatch","useAppSelector","Exchanges","loading","setLoading","page","setPage","hasMore","setHasMore","destroy$","exchangesState","state","exchanges","dispatch","retrieveExchanges","pipe","subscribe","res","length","window","scroll","top","next","complete","overflow","data"],"mappings":"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","sourcesContent":["import { Grid, Skeleton } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Subject, takeUntil } from 'rxjs';\nimport ExchangesList from '../components/ExchangesList';\nimport ExchangesListSkeleton from '../components/ExchangesListSkeleton';\nimport { retrieveExchangesAction } from '../store/exchangesSlice';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\n\nfunction Exchanges() {\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(1);\n    const [hasMore, setHasMore] = useState(true);\n    const [destroy$] = useState(new Subject<void>());\n\n    const exchangesState = useAppSelector(state => state.exchanges);\n    const dispatch = useAppDispatch();\n\n    const retrieveExchanges = () => {\n        retrieveExchangesAction(exchangesState, dispatch, { page }).pipe(\n            takeUntil(destroy$)\n        ).subscribe(res => {\n            if (page === 1) { // reset loading for initial call\n                setLoading(false);\n            }\n            if (res.length < 60) { // assuming page size is 60\n                setHasMore(false);\n            }\n            if (res.length > 0) { // we don't need to increment the offset if there is no more data to fetch\n                setPage(page + 1);\n            }\n        })\n    }\n\n    useEffect(() => {\n        window.scroll({ top: 0 }); // scroll to top to prevent fetching next page\n        retrieveExchanges();\n\n        return () => {\n            destroy$.next();\n            destroy$.complete();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (loading) return (\n        <Grid container spacing={2}>\n            <ExchangesListSkeleton size={24} />\n        </Grid>\n    );\n\n    return (\n        <InfiniteScroll style={{ overflow: \"inherit\" }}\n            next={retrieveExchanges}\n            dataLength={exchangesState.data.length}\n            hasMore={hasMore}\n            loader={<Skeleton width={\"60%\"} />}\n            scrollThreshold={\"20px\"}\n        >\n            <Grid container spacing={2}>\n                <ExchangesList exchanges={exchangesState.data} />\n            </Grid>\n        </InfiniteScroll >\n    );\n}\n\nexport default Exchanges;\n"]},"metadata":{},"sourceType":"module"}