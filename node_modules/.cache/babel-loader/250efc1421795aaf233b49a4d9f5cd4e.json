{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { tap } from \"rxjs\";\nimport { exchangesService } from \"../services\";\nconst initState = {\n  data: []\n};\nconst exchangesSlice = createSlice({\n  name: 'exchanges',\n  initialState: initState,\n  reducers: {\n    setExchanges: (state, action) => {\n      state.data = action.payload;\n    }\n  }\n});\nconst {\n  setExchanges\n} = exchangesSlice.actions;\n\nconst retrieveExchangesAction = (state, dispatch, queryParams) => {\n  return exchangesService.retrieve(queryParams).pipe(tap(data => {\n    if (queryParams['page'] === 1) {\n      dispatch(setExchanges(data));\n    } else {\n      dispatch(setExchanges(state.data.concat(data)));\n    }\n  }));\n};\n\nexport { exchangesSlice, retrieveExchangesAction };","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/store/exchangesSlice.ts"],"names":["createSlice","tap","exchangesService","initState","data","exchangesSlice","name","initialState","reducers","setExchanges","state","action","payload","actions","retrieveExchangesAction","dispatch","queryParams","retrieve","pipe","concat"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAAqBC,GAArB,QAAgC,MAAhC;AAGA,SAASC,gBAAT,QAAiC,aAAjC;AAMA,MAAMC,SAAyB,GAAG;AAC9BC,EAAAA,IAAI,EAAE;AADwB,CAAlC;AAIA,MAAMC,cAAc,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,WADyB;AAE/BC,EAAAA,YAAY,EAAEJ,SAFiB;AAG/BK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA8C;AACxDD,MAAAA,KAAK,CAACN,IAAN,GAAaO,MAAM,CAACC,OAApB;AACH;AAHK;AAHqB,CAAD,CAAlC;AAUA,MAAM;AAAEH,EAAAA;AAAF,IAAmBJ,cAAc,CAACQ,OAAxC;;AAEA,MAAMC,uBAAuB,GAAG,CAACJ,KAAD,EAAwBK,QAAxB,EAA+CC,WAA/C,KAA4F;AACxH,SAAOd,gBAAgB,CAACe,QAAjB,CAA0BD,WAA1B,EAAuCE,IAAvC,CACHjB,GAAG,CAACG,IAAI,IAAI;AACR,QAAIY,WAAW,CAAC,MAAD,CAAX,KAAwB,CAA5B,EAA+B;AAC3BD,MAAAA,QAAQ,CAACN,YAAY,CAACL,IAAD,CAAb,CAAR;AACH,KAFD,MAEO;AACHW,MAAAA,QAAQ,CAACN,YAAY,CAACC,KAAK,CAACN,IAAN,CAAWe,MAAX,CAAkBf,IAAlB,CAAD,CAAb,CAAR;AACH;AACJ,GANE,CADA,CAAP;AASH,CAVD;;AAYA,SAASC,cAAT,EAAyBS,uBAAzB","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Observable, tap } from \"rxjs\";\nimport { AppDispatch } from \".\";\nimport Exchange from \"../models/exchange\";\nimport { exchangesService } from \"../services\";\n\ntype ExchangesState = {\n    data: Exchange[];\n}\n\nconst initState: ExchangesState = {\n    data: []\n}\n\nconst exchangesSlice = createSlice({\n    name: 'exchanges',\n    initialState: initState,\n    reducers: {\n        setExchanges: (state, action: PayloadAction<Exchange[]>) => {\n            state.data = action.payload;\n        }\n    }\n});\n\nconst { setExchanges } = exchangesSlice.actions;\n\nconst retrieveExchangesAction = (state: ExchangesState, dispatch: AppDispatch, queryParams: any): Observable<Exchange[]> => {\n    return exchangesService.retrieve(queryParams).pipe(\n        tap(data => {\n            if (queryParams['page'] === 1) {\n                dispatch(setExchanges(data));\n            } else {\n                dispatch(setExchanges(state.data.concat(data)));\n            }\n        })\n    );\n}\n\nexport { exchangesSlice, retrieveExchangesAction };"]},"metadata":{},"sourceType":"module"}