{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { tap } from \"rxjs\";\nimport { newsService } from \"../services\";\nconst initState = {\n  data: []\n};\nconst newsSlice = createSlice({\n  name: 'news',\n  initialState: initState,\n  reducers: {\n    setNews: (state, action) => {\n      state.data = action.payload;\n    }\n  }\n});\nconst {\n  setNews\n} = newsSlice.actions;\n\nconst retrieveNewsAction = (state, dispatch, queryParams) => {\n  return newsService.retrieve(queryParams).pipe(tap(data => {\n    if (queryParams['page'] === 1) {\n      dispatch(setNews(data));\n    } else {\n      dispatch(setNews(state.data.concat(data)));\n    }\n  }));\n};\n\nexport { newsSlice, retrieveNewsAction };","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/store/newsSlice.ts"],"names":["createSlice","tap","newsService","initState","data","newsSlice","name","initialState","reducers","setNews","state","action","payload","actions","retrieveNewsAction","dispatch","queryParams","retrieve","pipe","concat"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAAqBC,GAArB,QAAgC,MAAhC;AAGA,SAASC,WAAT,QAA4B,aAA5B;AAMA,MAAMC,SAAoB,GAAG;AACzBC,EAAAA,IAAI,EAAE;AADmB,CAA7B;AAIA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC1BM,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAEJ,SAFY;AAG1BK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AAC/CD,MAAAA,KAAK,CAACN,IAAN,GAAaO,MAAM,CAACC,OAApB;AACH;AAHK;AAHgB,CAAD,CAA7B;AAUA,MAAM;AAAEH,EAAAA;AAAF,IAAcJ,SAAS,CAACQ,OAA9B;;AAEA,MAAMC,kBAAkB,GAAG,CAACJ,KAAD,EAAmBK,QAAnB,EAA0CC,WAA1C,KAAmF;AAC1G,SAAOd,WAAW,CAACe,QAAZ,CAAqBD,WAArB,EAAkCE,IAAlC,CACHjB,GAAG,CAACG,IAAI,IAAI;AACR,QAAIY,WAAW,CAAC,MAAD,CAAX,KAAwB,CAA5B,EAA+B;AAC3BD,MAAAA,QAAQ,CAACN,OAAO,CAACL,IAAD,CAAR,CAAR;AACH,KAFD,MAEO;AACHW,MAAAA,QAAQ,CAACN,OAAO,CAACC,KAAK,CAACN,IAAN,CAAWe,MAAX,CAAkBf,IAAlB,CAAD,CAAR,CAAR;AACH;AACJ,GANE,CADA,CAAP;AASH,CAVD;;AAYA,SAASC,SAAT,EAAoBS,kBAApB","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Observable, tap } from \"rxjs\";\nimport { AppDispatch } from \".\";\nimport News from \"../models/news\";\nimport { newsService } from \"../services\";\n\ntype NewsState = {\n    data: News[];\n}\n\nconst initState: NewsState = {\n    data: []\n}\n\nconst newsSlice = createSlice({\n    name: 'news',\n    initialState: initState,\n    reducers: {\n        setNews: (state, action: PayloadAction<News[]>) => {\n            state.data = action.payload;\n        }\n    }\n});\n\nconst { setNews } = newsSlice.actions;\n\nconst retrieveNewsAction = (state: NewsState, dispatch: AppDispatch, queryParams: any): Observable<News[]> => {\n    return newsService.retrieve(queryParams).pipe(\n        tap(data => {\n            if (queryParams['page'] === 1) {\n                dispatch(setNews(data));\n            } else {\n                dispatch(setNews(state.data.concat(data)));\n            }\n        })\n    );\n}\n\nexport { newsSlice, retrieveNewsAction };"]},"metadata":{},"sourceType":"module"}