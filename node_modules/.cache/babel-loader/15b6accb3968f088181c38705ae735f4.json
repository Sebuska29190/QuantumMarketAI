{"ast":null,"code":"export default class BaseService {\n  constructor(endpoint, queryParams) {\n    this.endpoint = endpoint;\n    this.queryParams = queryParams;\n    this.cache = void 0;\n    this.cache = {};\n  }\n\n  fetchFakeData(data, time) {\n    return new Promise((resolve, _) => {\n      setTimeout(() => resolve(data), time);\n    });\n  }\n\n  getQueryParams(queryParams) {\n    return { ...this.queryParams,\n      ...queryParams\n    };\n  }\n\n  getUrl(queryParams) {\n    const url = new URL(this.endpoint);\n\n    for (let key in queryParams) {\n      url.searchParams.set(key, queryParams[key]);\n    }\n\n    return url.href;\n  }\n\n  putInCache(response, url, time) {\n    this.cache[url] = {\n      timestamp: new Date(new Date().getTime() + time * 60000).getTime(),\n      response: response\n    };\n  }\n\n  isCacheResponseValid(url) {\n    // check if response exists and time is less than 5min from the last call\n    return this.cache[url] && this.cache[url].timestamp > new Date().getTime();\n  }\n\n  getFromCache(url) {\n    return this.cache[url].response;\n  }\n\n}","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/services/baseService.ts"],"names":["BaseService","constructor","endpoint","queryParams","cache","fetchFakeData","data","time","Promise","resolve","_","setTimeout","getQueryParams","getUrl","url","URL","key","searchParams","set","href","putInCache","response","timestamp","Date","getTime","isCacheResponseValid","getFromCache"],"mappings":"AAEA,eAAe,MAAeA,WAAf,CAAmC;AAG9CC,EAAAA,WAAW,CAAWC,QAAX,EAAuCC,WAAvC,EAAyD;AAAA,SAA9CD,QAA8C,GAA9CA,QAA8C;AAAA,SAAlBC,WAAkB,GAAlBA,WAAkB;AAAA,SAF1DC,KAE0D;AAChE,SAAKA,KAAL,GAAa,EAAb;AACH;;AAISC,EAAAA,aAAa,CAACC,IAAD,EAAeC,IAAf,EAA8C;AACjE,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAC/BC,MAAAA,UAAU,CAAC,MAAMF,OAAO,CAACH,IAAD,CAAd,EAAsBC,IAAtB,CAAV;AACH,KAFM,CAAP;AAGH;;AAESK,EAAAA,cAAc,CAACT,WAAD,EAAmB;AACvC,WAAO,EAAE,GAAG,KAAKA,WAAV;AAAuB,SAAGA;AAA1B,KAAP;AACH;;AAESU,EAAAA,MAAM,CAACV,WAAD,EAAmB;AAC/B,UAAMW,GAAG,GAAG,IAAIC,GAAJ,CAAQ,KAAKb,QAAb,CAAZ;;AACA,SAAK,IAAIc,GAAT,IAAgBb,WAAhB,EAA6B;AACzBW,MAAAA,GAAG,CAACG,YAAJ,CAAiBC,GAAjB,CAAqBF,GAArB,EAA0Bb,WAAW,CAACa,GAAD,CAArC;AACH;;AACD,WAAOF,GAAG,CAACK,IAAX;AACH;;AAESC,EAAAA,UAAU,CAACC,QAAD,EAAgBP,GAAhB,EAA6BP,IAA7B,EAA2C;AAC3D,SAAKH,KAAL,CAAWU,GAAX,IAAkB;AACdQ,MAAAA,SAAS,EAAE,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAwBjB,IAAI,GAAG,KAAxC,EAAgDiB,OAAhD,EADG;AAEdH,MAAAA,QAAQ,EAAEA;AAFI,KAAlB;AAIH;;AAESI,EAAAA,oBAAoB,CAACX,GAAD,EAAc;AAAE;AAC1C,WAAO,KAAKV,KAAL,CAAWU,GAAX,KAAmB,KAAKV,KAAL,CAAWU,GAAX,EAAgBQ,SAAhB,GAA4B,IAAIC,IAAJ,GAAWC,OAAX,EAAtD;AACH;;AAESE,EAAAA,YAAY,CAACZ,GAAD,EAAc;AAChC,WAAO,KAAKV,KAAL,CAAWU,GAAX,EAAgBO,QAAvB;AACH;;AAxC6C","sourcesContent":["import { Observable } from \"rxjs\";\n\nexport default abstract class BaseService<TModel> {\n    protected cache: any;\n\n    constructor(protected endpoint: string, protected queryParams: any) {\n        this.cache = {};\n    }\n\n    abstract retrieve(queryParams: any, id?: any): Observable<TModel>;\n\n    protected fetchFakeData(data: TModel, time: number): Promise<TModel> {\n        return new Promise((resolve, _) => {\n            setTimeout(() => resolve(data), time);\n        });\n    }\n\n    protected getQueryParams(queryParams: any) {\n        return { ...this.queryParams, ...queryParams };\n    }\n\n    protected getUrl(queryParams: any) {\n        const url = new URL(this.endpoint);\n        for (let key in queryParams) {\n            url.searchParams.set(key, queryParams[key]);\n        }\n        return url.href\n    }\n\n    protected putInCache(response: any, url: string, time: number) {\n        this.cache[url] = {\n            timestamp: new Date(new Date().getTime() + (time * 60000)).getTime(),\n            response: response\n        }\n    }\n\n    protected isCacheResponseValid(url: string) { // check if response exists and time is less than 5min from the last call\n        return this.cache[url] && this.cache[url].timestamp > new Date().getTime();\n    }\n\n    protected getFromCache(url: string) {\n        return this.cache[url].response;\n    }\n}"]},"metadata":{},"sourceType":"module"}