{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { tap } from \"rxjs\";\nimport { coinsService, exchangesService, newsService } from \"../services\";\nconst initState = {\n  coins: [],\n  exchanges: [],\n  news: []\n};\nconst homeSlice = createSlice({\n  name: 'home',\n  initialState: initState,\n  reducers: {\n    setCoins: (state, action) => {\n      state.coins = action.payload;\n    },\n    setExchanges: (state, action) => {\n      state.exchanges = action.payload;\n    },\n    setNews: (state, action) => {\n      state.news = action.payload;\n    }\n  }\n});\nconst {\n  setCoins,\n  setExchanges,\n  setNews\n} = homeSlice.actions;\n\nconst retrieveCoinsAction = (dispatch, queryParams) => {\n  return coinsService.retrieve(queryParams).pipe(tap(data => {\n    dispatch(setCoins(data.slice(0, 12)));\n  }));\n};\n\nconst retrieveExchangesAction = dispatch => {\n  return exchangesService.retrieve({\n    page: 1\n  }).pipe(tap(data => {\n    dispatch(setExchanges(data.slice(0, 12)));\n  }));\n};\n\nconst retrieveNewsAction = dispatch => {\n  return newsService.retrieve({\n    page: 1\n  }).pipe(tap(data => {\n    dispatch(setNews(data.slice(0, 12)));\n  }));\n};\n\nexport { homeSlice, retrieveCoinsAction, retrieveExchangesAction, retrieveNewsAction };","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/store/homeSlice.ts"],"names":["createSlice","tap","coinsService","exchangesService","newsService","initState","coins","exchanges","news","homeSlice","name","initialState","reducers","setCoins","state","action","payload","setExchanges","setNews","actions","retrieveCoinsAction","dispatch","queryParams","retrieve","pipe","data","slice","retrieveExchangesAction","page","retrieveNewsAction"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,GAAT,QAAoB,MAApB;AAKA,SAASC,YAAT,EAAuBC,gBAAvB,EAAyCC,WAAzC,QAA4D,aAA5D;AAQA,MAAMC,SAAoB,GAAG;AACzBC,EAAAA,KAAK,EAAE,EADkB;AAEzBC,EAAAA,SAAS,EAAE,EAFc;AAGzBC,EAAAA,IAAI,EAAE;AAHmB,CAA7B;AAMA,MAAMC,SAAS,GAAGT,WAAW,CAAC;AAC1BU,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAEN,SAFY;AAG1BO,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AAChDD,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAArB;AACH,KAHK;AAINC,IAAAA,YAAY,EAAE,CAACH,KAAD,EAAQC,MAAR,KAA8C;AACxDD,MAAAA,KAAK,CAACP,SAAN,GAAkBQ,MAAM,CAACC,OAAzB;AACH,KANK;AAONE,IAAAA,OAAO,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAA0C;AAC/CD,MAAAA,KAAK,CAACN,IAAN,GAAaO,MAAM,CAACC,OAApB;AACH;AATK;AAHgB,CAAD,CAA7B;AAgBA,MAAM;AAAEH,EAAAA,QAAF;AAAYI,EAAAA,YAAZ;AAA0BC,EAAAA;AAA1B,IAAsCT,SAAS,CAACU,OAAtD;;AAEA,MAAMC,mBAAmB,GAAG,CAACC,QAAD,EAAwBC,WAAxB,KAA6C;AACrE,SAAOpB,YAAY,CAACqB,QAAb,CAAsBD,WAAtB,EAAmCE,IAAnC,CACHvB,GAAG,CAACwB,IAAI,IAAI;AACRJ,IAAAA,QAAQ,CAACR,QAAQ,CAACY,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,EAAd,CAAD,CAAT,CAAR;AACH,GAFE,CADA,CAAP;AAKH,CAND;;AAQA,MAAMC,uBAAuB,GAAIN,QAAD,IAA2B;AACvD,SAAOlB,gBAAgB,CAACoB,QAAjB,CAA0B;AAAEK,IAAAA,IAAI,EAAE;AAAR,GAA1B,EAAuCJ,IAAvC,CACHvB,GAAG,CAACwB,IAAI,IAAI;AACRJ,IAAAA,QAAQ,CAACJ,YAAY,CAACQ,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,EAAd,CAAD,CAAb,CAAR;AACH,GAFE,CADA,CAAP;AAKH,CAND;;AAQA,MAAMG,kBAAkB,GAAIR,QAAD,IAA2B;AAClD,SAAOjB,WAAW,CAACmB,QAAZ,CAAqB;AAAEK,IAAAA,IAAI,EAAE;AAAR,GAArB,EAAkCJ,IAAlC,CACHvB,GAAG,CAACwB,IAAI,IAAI;AACRJ,IAAAA,QAAQ,CAACH,OAAO,CAACO,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,EAAd,CAAD,CAAR,CAAR;AACH,GAFE,CADA,CAAP;AAKH,CAND;;AAQA,SAASjB,SAAT,EAAoBW,mBAApB,EAAyCO,uBAAzC,EAAkEE,kBAAlE","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { tap } from \"rxjs\";\nimport { AppDispatch } from \".\";\nimport Coin from \"../models/coin\";\nimport Exchange from \"../models/exchange\";\nimport News from \"../models/news\";\nimport { coinsService, exchangesService, newsService } from \"../services\";\n\ntype HomeState = {\n    coins: Coin[];\n    exchanges: Exchange[];\n    news: News[];\n}\n\nconst initState: HomeState = {\n    coins: [],\n    exchanges: [],\n    news: []\n}\n\nconst homeSlice = createSlice({\n    name: 'home',\n    initialState: initState,\n    reducers: {\n        setCoins: (state, action: PayloadAction<Coin[]>) => {\n            state.coins = action.payload;\n        },\n        setExchanges: (state, action: PayloadAction<Exchange[]>) => {\n            state.exchanges = action.payload;\n        },\n        setNews: (state, action: PayloadAction<News[]>) => {\n            state.news = action.payload;\n        }\n    }\n});\n\nconst { setCoins, setExchanges, setNews } = homeSlice.actions;\n\nconst retrieveCoinsAction = (dispatch: AppDispatch, queryParams: any) => {\n    return coinsService.retrieve(queryParams).pipe(\n        tap(data => {\n            dispatch(setCoins(data.slice(0, 12)));\n        })\n    );\n}\n\nconst retrieveExchangesAction = (dispatch: AppDispatch) => {\n    return exchangesService.retrieve({ page: 1 }).pipe(\n        tap(data => {\n            dispatch(setExchanges(data.slice(0, 12)));\n        })\n    );\n}\n\nconst retrieveNewsAction = (dispatch: AppDispatch) => {\n    return newsService.retrieve({ page: 1 }).pipe(\n        tap(data => {\n            dispatch(setNews(data.slice(0, 12)));\n        })\n    );\n}\n\nexport { homeSlice, retrieveCoinsAction, retrieveExchangesAction, retrieveNewsAction };"]},"metadata":{},"sourceType":"module"}