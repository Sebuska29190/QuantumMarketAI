{"ast":null,"code":"var _jsxFileName = \"/home/sebastian/Pobrane/cryptowatch/src/pages/Coins.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, Skeleton } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Subject, takeUntil } from 'rxjs';\nimport CoinsList from '../components/CoinsList';\nimport CoinsListSkeleton from '../components/CoinsListSkeleton';\nimport { retrieveCoinsAction } from '../store/coinsSlice';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Coins() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [offset, setOffset] = useState(0);\n  const [hasMore, setHasMore] = useState(true); // used to unsubscribe from action calls (in combination with takeUntil)\n\n  const [destroy$] = useState(new Subject());\n  const coinsState = useAppSelector(state => state.coins);\n  const selectedCurrencyRef = useAppSelector(state => state.navbar.selectedCurrency);\n  const dispatch = useAppDispatch();\n\n  const retrieveCoins = (offset, limit) => {\n    if (!selectedCurrencyRef.uuid) return;\n    return retrieveCoinsAction(coinsState, dispatch, {\n      offset: offset,\n      limit: limit,\n      referenceCurrencyUuid: selectedCurrencyRef.uuid\n    }).pipe(takeUntil(destroy$)).subscribe(res => {\n      if (offset === 0) {\n        // reset loading for initial call\n        setLoading(false);\n      }\n\n      if (res.length < 24) {\n        setHasMore(false);\n      }\n\n      if (res.length > 0) {\n        // we don't need to increment the offset if there is no more data to fetch\n        setOffset(offset + limit);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (offset === 0) {\n      window.scroll({\n        top: 0\n      }); // scroll to top to prevent fetching next page\n\n      retrieveCoins(0, 24);\n    } else {\n      retrieveCoins(0, offset);\n    }\n\n    return () => {\n      destroy$.next();\n      destroy$.complete();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedCurrencyRef]);\n  if (loading) return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: /*#__PURE__*/_jsxDEV(CoinsListSkeleton, {\n      size: 24\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    style: {\n      overflow: \"inherit\"\n    },\n    next: () => retrieveCoins(offset, 24),\n    dataLength: coinsState.data.length,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"60%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }, this),\n    scrollThreshold: \"20px\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(CoinsList, {\n        coins: coinsState.data,\n        currencySign: selectedCurrencyRef.sign || selectedCurrencyRef.symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Coins, \"cS0nk1QITP9mHGEhrUClvR97XQ0=\", false, function () {\n  return [useAppSelector, useAppSelector, useAppDispatch];\n});\n\n_c = Coins;\nexport default Coins;\n\nvar _c;\n\n$RefreshReg$(_c, \"Coins\");","map":{"version":3,"sources":["/home/sebastian/Pobrane/cryptowatch/src/pages/Coins.tsx"],"names":["Grid","Skeleton","React","useEffect","useState","InfiniteScroll","Subject","takeUntil","CoinsList","CoinsListSkeleton","retrieveCoinsAction","useAppDispatch","useAppSelector","Coins","loading","setLoading","offset","setOffset","hasMore","setHasMore","destroy$","coinsState","state","coins","selectedCurrencyRef","navbar","selectedCurrency","dispatch","retrieveCoins","limit","uuid","referenceCurrencyUuid","pipe","subscribe","res","length","window","scroll","top","next","complete","overflow","data","sign","symbol"],"mappings":"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","sourcesContent":["import { Grid, Skeleton } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Subject, takeUntil } from 'rxjs';\nimport CoinsList from '../components/CoinsList';\nimport CoinsListSkeleton from '../components/CoinsListSkeleton';\nimport { retrieveCoinsAction } from '../store/coinsSlice';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\n\nfunction Coins() {\n\n    const [loading, setLoading] = useState(true);\n    const [offset, setOffset] = useState(0);\n    const [hasMore, setHasMore] = useState(true);\n\n    // used to unsubscribe from action calls (in combination with takeUntil)\n    const [destroy$] = useState(new Subject<void>());\n\n    const coinsState = useAppSelector(state => state.coins);\n    const selectedCurrencyRef = useAppSelector(state => state.navbar.selectedCurrency);\n    const dispatch = useAppDispatch();\n\n    const retrieveCoins = (offset: number, limit: number) => {\n        if (!selectedCurrencyRef.uuid) return;\n        return retrieveCoinsAction(coinsState, dispatch, { offset: offset, limit: limit, referenceCurrencyUuid: selectedCurrencyRef.uuid }).pipe(\n            takeUntil(destroy$)\n        ).subscribe(res => {\n            if (offset === 0) { // reset loading for initial call\n                setLoading(false);\n            }\n            if (res.length < 24) {\n                setHasMore(false);\n            }\n            if (res.length > 0) { // we don't need to increment the offset if there is no more data to fetch\n                setOffset(offset + limit);\n            }\n        });\n    }\n\n    useEffect(() => {\n        if (offset === 0) {\n            window.scroll({ top: 0 }); // scroll to top to prevent fetching next page\n            retrieveCoins(0, 24);\n        } else {\n            retrieveCoins(0, offset);\n        }\n\n        return () => {\n            destroy$.next();\n            destroy$.complete();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedCurrencyRef])\n\n    if (loading) return (\n        <Grid container spacing={2}>\n            <CoinsListSkeleton size={24} />\n        </Grid>\n    );\n\n    return (\n        <InfiniteScroll style={{ overflow: \"inherit\" }}\n            next={() => retrieveCoins(offset, 24)} dataLength={coinsState.data.length}\n            hasMore={hasMore}\n            loader={<Skeleton width={\"60%\"} />}\n            scrollThreshold={\"20px\"}\n        >\n            <Grid container spacing={2}>\n                <CoinsList coins={coinsState.data} currencySign={selectedCurrencyRef.sign || selectedCurrencyRef.symbol} />\n            </Grid>\n        </InfiniteScroll>\n    );\n}\n\nexport default Coins;\n"]},"metadata":{},"sourceType":"module"}